NumPy:
It is a Python library used to work with arrays.
Short form for Numerical Python.
Comes with many built-in functions linear algebra, matrices, transformations.
In Python, we have lists that serve the purpose of arrays. But they are a bit slow for processing.
NumPy aims to provide an array object that is ~50x faster than the traditional Py lists.
This array object in NumPy is called an "ndarray".

Why is it faster?
NumPy arrays are stored in memory in one continuous place unlike lists.
Due to this, process can run faster and manipulate the data efficiently.
NumPy is partially written in Python, but majority of it is written in C/C++.

How to use NumPy?
pip install numpy
OR
python -m pip install numpy
OR
py -m pip install numpy


Dimensions in Arrays.
0-D array, a.k.a. Scalars (single value), each value in an array is a 0-D array.
arr = np.array(36)

1-D Array:
arr = np.array([1,2,3,4,5])

2-D Array:
arr = np.array([ [1,2,3], [4,5,6] ] )

3-D Array:
arr = np.array([ [ [1,2,3], [4,5,6], [7,8,9], [10,11,12] ] ])

Check No. of dimensions in an array:
print(arr.ndim)

While creating arrays, you can specify how many dimensions to create:
arr = np.array([1,2,3,4], ndmin=5)

print(arr)
print(arr.ndim)

Output:
[[[[[1 2 3 4]]]]]
5

Here, the innermost dim (5th dim) has 4 elements.
the 4th dim has 1 element, which is the list/array/vector of values itself ([1,2,3,4]).
the 3rd dim also has 1 element, which is the matrix (2D array that contains the vector).
the 2nd dim has 1 element which is the 3D array
the 1st dim has 1 element which is a a 4D array.

NumPY Array Indexing:
arr = np.array([ [ [1,2,3], [4,5,6], [7,8,9], [10,11,12] ] ])
print(arr[0])
print(arr[0][0])
print(arr[0][0][0])
print(arr[0][1])
print(arr[0][2])
print(arr[0][3])
print(arr[0][3][2])

OR, use commas to separate dims:
arr = np.array([ [1,2,3], [4,5,6]])
print(arr[1,2])

Use negative indexing:
arr = np.array([[1,2,3,4,5], [6,7,8,9,10] ])
print(arr[1,-1])
print(arr[1,-3])
print(arr[0,-3])

Array slicing:
arr[start:end]
arr[start:end:step]

arr[m:n]
start from the mth element, upto the nth-1 element.

Copy arrays:
arr = np.array([1,2,3,4,5])
newArr = arr.copy()

print(arr)
print(newArr)

arr[0] = 76
print(arr)
print(newArr)

The copy owns the data.
If you make changes to the original array, it will not be reflected in the copy. And vice versa.

Numpy View arrays:
arr = np.array([1,2,3,4,5])
newArr = arr.copy()

print(arr)
print(newArr)

arr[0] = 76
print(arr)
print(newArr)

The view does not own the data. Any changes in either the original or the "view" will reflect in the other one.
arr = np.array([1,2,3,4,5])

copyArr = arr.copy()
viewArr = arr.view()

print(copyArr)
print(viewArr)

# If it returns "None", it is a copy and owns the data.
print(copyArr.base)    
print(viewArr.base)

Iterate an Numpy Array:
1-D Array:
arr = np.array([1,2,3,4,5])
for i in arr:
    print(i)
	
2-D Array:
arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])
for i in arr:
    for j in i:
        print(j)
		
3-D Array:
arr = np.array([[[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]])
for i in arr:
    for j in i:
        for k in j:
            print(k)

Getting the index element nos. of each element value using np.ndenumerate:
arr = np.array([[[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]])
for indx, x in np.ndenumerate(arr):
    print(indx, x)
	
Join arrays:
arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])

arr = np.concatenate((arr1, arr2))
print(arr)

Join 2-d arrays along the rows by giving axis=1:
arr = np.concatenate((arr1, arr2), axis=1)
print(arr)

Join using the stack() function:
arr1 = np.array([1,2,3,4])
arr2 = np.array([5,6,7,8])

arr = np.stack((arr1,arr2))
print(arr)

Stack along the rows:
arr1 = np.array([1,2,3,4])
arr2 = np.array([5,6,7,8])

arr = np.stack((arr1,arr2), axis=1)
print(arr)

Split arrays:
arr1 = np.array([1,2,3,4,5,6])

arr = np.array_split(arr1,3)
print(arr)

arr1 = np.array([1,2,3,4,5,6,7])

arr = np.array_split(arr1,3)
print(arr)

arr1 = np.array([1,2,3,4,5,6])

arr = np.array_split(arr1,4)
print(arr)

print(arr[0])
print(arr[1])
print(arr[2])
print(arr[3])


Splitting 2-D Arrays:
arr1 = np.array([[1,2],[3,4], [5,6],[7,8], [9,10]])

arr = np.array_split(arr1, 3)
print(arr)

Search for values in an Array:
arr = np.array([1,2,3,4,5,6,7])
srch = np.where(arr == 4)
print(srch)

arr = np.array([1,2,3,4,5,4,6,7,4])
srch = np.where(arr == 4)
print(srch)
print(arr[srch])

arr = np.array([1,2,3,4,5,6,7,8])
srch = np.where(arr %2 == 0)
print(srch)

arr = np.array([1,2,3,4,5,6,7,8])
srch = np.where(arr %2 == 1)
print(srch)

Using searchSorted():


To sort an array:
arr1 = np.array(["strawberry", "apple", "orange", "banana",])
arr = np.sort(arr1)

print(arr)

Filter Arrays:
arr1 = np.array([15,16,17,18])
filter = [True, False, False, True]

newArr = arr1[filter]
print(newArr)

arr1 = np.array([15,16,17,18, 19, 20])
filter = arr1 > 18

newArr = arr1[filter]
print(filter)
print(newArr)

arr1 = np.array([15,16,17,18, 19, 20])
filter = arr1 %2 == 0

newArr = arr1[filter]
print(filter)
print(newArr)
