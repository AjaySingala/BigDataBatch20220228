DBMS: DataBase Management System.
	Kind of a"repository" that stores data in a specific pre-defined format.
	There is a pre-defined "schema" to store the data.

Entities:
Customers
Products
Orders

Which product were purchased by customers between 01-Dec-2021 and 31-Dec-2021:
	How much was purchased
	At what price
	Which cities did the customers belong to.
	
RDBMS: Relational DataBase Management System.
SQL to query the results.
SQL: Structured Query Language.
	The DB language used to perform operation on an existing database to:
		Create		C		INSERT
		Retrieve	R		SELECT
		Update		U		UPDATE
		Delete		D		DELETE
	data.
	
SQL Command Categories:
	DDL	- Data Definition Langauage
	DML - Data Manipulation Language
	DQL - Data Query Language
	DCL - Data Control Language
	TCL - Transaction Control Language
	
DDL:
	CREATE: Create database, tables, indexes, views, stored procedures, functions etc.
	
CREATE TABLE Customers			===> TABLE
(
	Id NVARCHAR(50),			===> FIELDS / Columns
	Email NVARCHAR(20),			===> FIELDS / Columns
	Firstname NVARCHAR(50),		===> FIELDS / Columns
	Lastname NVARCHAR(50)		===> FIELDS / Columns
)

Data Types:
Varchar
Int
DateTime
Decimal
Bit (either a 0 or 1)
NVARCHAR	=> UNICODE

	DROP
		DROP TABLE <tablename>
	
	ALTER
	TRUNCATE
	
DML: INSERT:
	INSERT rows.
	
Syntax:
INSERT INTO <table> (col1, col2, col3...coln) VALUES (val1, val2, val3...valn)

INSERT INTO Customers 
(Id, Firstname, Lastname, Email)
VALUES( 101, 'John', 'Smith', 'jsmith@gmail.com')

INSERT INTO Customers
(Id, Firstname, Lastname, Email)
VALUES( 102, 'Mary', 'Jane', 'mjane@outlook.com')

INSERT INTO Customers
VALUES( 103, 'Joe', 'Fields', 'jfields@outlook.com')
Disadvantages of this format/syntax:
	1. You have to know the sequence of the columns.
	2. You have to know the data type of each column.
	3. What if there are 50 columns in the table?

When inserting data, you may not be providing values for ALL columns.
	For e.g.; 20 columns in the table, 15 of them are optional.
	
DML: SELECT:
	SELECT col1, col2,...coln
	FROM tablename
	
	SELECT *
	FROM tablename

	SELECT * FROM Customers
	SELECT Firstname FROM Customers
	SELECT Firstname, Lastname FROM Customers
	SELECT Lastname, Firstname FROM Customers
	
Examples:
Display customer's id, customername and City with the orderId and date of the order they have placed.
JOIN the tables!!!

Syntax of JOIN:
SELECT col1, col2,...coln
FROM table1
INNER JOIN table2 ON table1.pk = table2.fk

Example:
SELECT customers.CustomerId, customers.CustomerName, customers.City,
orders.OrderId, orders.OrderDate
FROM Customers
INNER JOIN Orders ON Customers.CustomerId = orders.CustomerId 

DDL: CREATE, DROP.
DML: INSERT, SELECT (DQL)

How to filter records?
WHERE clause:

Syntax:
SELECT col1, col2...coln
FROM table
WHERE <condition1>
AND <condition2>

SELECT col1, col2...coln
FROM table
WHERE <condition1>
OR <condition2>

Example:
SELECT CustomerId, CustomerName, City, Country
FROM Customers
WHERE Country = 'Germany'

WHERE LIKE clause:

Sorting:
ORDER BY <column>
Default is in Ascending Order.

Sort on multpile cols:
ORDER BY <column1, col2,...coln>


GROUP BY clause:
Used for aggregations.
SUM
AVG
COUNT
MAX
MIN

Example: Show me how much quantity was sold for each product.
REMEMBER: When using GROUP BY, never ever ever use "SELECT *".

HAVING clause, which is used with GROUP BY.
WHERE vs HAVING???
	WHERE is performed before the grouping.
		Filters records before the GROUP BY clause is applied to the query.
	HAVING is performed after the grouping.
		Filters records after the GROUP BY clause is applied.

When using GROUP BY, only those columns can be mentioned in the SELECT clause that are listed in the GROUP BY clause
Aggregate functions can also be specified in the SELECT clause with GROUP BY.

Example:
SELECT od.ProductId, SUM(od.Quantity) as 'TotalQuantity',
FROM OrderDetails od
	INNER JOIN Products p ON p.ProductId = od.ProductId
	INNER JOIN Categories c ON c.CategoryID = p.CategoryId
WHERE c.CategoryName = 'Produce'
GROUP BY od.ProductId
HAVING TotalQuantity > 45

Relational DB terminologies:
Attribute: Columns. They are properties that define a relation/table.
Tuple: Each row in a relation/table is known as a Tuple.
Degree: The number of attributes in the relation/table is known as the Degree of the Relation/Table.
Cardinality: The number of tuples in a relation/table.

WHERE IN Clause:
Display products that have id 1 or 2 or 3 or 6.

Sub-query (nested query)  using the "WHERE IN" clause
SELECT o.OrderId, o.OrderDate, o.CustomerId, o.ShipperId
FROM Orders o
WHERE o.CustomerId IN (
   SELECT c.CustomerId
   FROM Customers
   WHERE City IN ('Berlin', 'London', 'Bern')
)

SELECT o.OrderId, o.OrderDate, o.CustomerId, o.ShipperId
FROM Orders o
WHERE o.CustomerId IN (1,4,11,14,16,19,53,72)

On MySQL:
Syntax:
1. CREATE DATABASE <db-name>

Example: 
CREATE DATABASE ecommerce;

2. Create tables.
	- Decide beforehand what tables to create, what PKs to define and what FKs to define, what contraints to define.
	- Constraints:
		- NOT NULL
		- UNIQUE
		- CHECK
		- DEFAULT
		
CREATE TABLE Customers
(
	Id INT NOT NULL,
	CustomerName VARCHAR(50) NOT NULL,
	ContactName VARCHAR(50),
	City VARCHAR(50),
	State VARCHAR(50),
	Country VARCHAR(50) DEFAULT 'USA',
	Email VARCHAR(25) UNIQUE,
	Age INT CHECK(Age >= 18)
	PRIMARY KEY (Id)
)

CREATE TABLE Orders
(
	Id INT NOT NULL,
	OrderDate DateTime NOT NULL,
	CustomerId INT NOT NULL,
	Remarks VARCHAR(50),
	
	PRIMARY KEY(Id),
	FOREIGN KEY (CustomerID) REFERENCES Customers(Id)
)

DDLs:
CREATE TABLE
DESCRIBE <tablename>
DROP TABLE Orders;		Delete the table.
TRUNCATE TABLE Orders;	Deletes all records from the table, but not the table itself.

ALTER TABLE: used to make changes to an existing table. For e.g.; adding a new column.
Ad to a new column:
ALTER TABLE Customers
ADD Phone VARCHAR(15)

Drop/Delete a column:
ALTER TABLE Customers
DROP COLUMN Phone

Modify a column (change it's data type):
SQL Server / MS Access:
ALTER TABLE Customers
ATLER COLUMN Phone INT

MySQL / Oracle:
ALTER TABLE Customers
MODIFY COLUMN Phone INT

INNER JOIN:
SELF JOIN: FK points to the PK in the same table.
Example:
SELECT e1.Id, e1.FirstName, e1.LastName, e1.ReportsTo,
	e2.Id, e2.FirstName, e2.LastName
FROM Employees e1
INNER JOIN Employees e2 ON e1.Reportsto = e2.Id

TABLEX
Id
AntoherId		FK pointing to the Id in the same table.

Multiplicity:
1:1	1 Employee 1 Manager
1:* 1 Customer Many Orders
1:* 1 Department Many Employees
*:1 Many Employees 1 Department
*:* Many-to-Many

Referential Integrity:
Depends on how well the PK-FK relations have been defined.
INSERT CONSTRAINT: Cannot insert record without a valid and existing value for the FK.
DELETE CONSTRAINT. Cannot delete the PK record if a FK record exists in any other table.
DELETE CASCADE. If the PK record is deleted, it will also delete all MATCHING FK records in all other tables.

ER Diagram: Entity Relationship Diagram.

DELETE:
Syntax:
DELETE FROM <tablename>
WHERE <condition>

Example:
DELETE FROM Products
WHERE ProductId = 1

DELETE FROM OrderDetails
WHERE ProductId = 1

NEVER USE A DELETE command WITHOUT ANY CONDITION!!!
IT WILL DELETE ALL RECORDS IN THE TABLE.
DELETE FROM Products

UPDATE:
Used to update existing records.
Syntax:
UPDATE <tablename>
SET col1 = value, col2 = valeue,...coln = value
WHERE <condition>

Example:
UPDATE Products
SET ProductName = 'Maple Syrup', Unit = '15 - 600 ml bottles'
WHERE ProductId = 3

NEVER USE AN UPDATE command WITHOUT ANY CONDITION!!!
IT WILL UPDATE ALL RECORDS IN THE TABLE.


Exercise:
Create a new DB on MySql
Create tables for:
	Customers
	Products
	Order
	OrderDetails
There are proper PK - FK relations between these 4.
Insert records in all 4.
Try the SELECT, UPDATE, DELETE statements.
	Try WHERE, WHERE IN, WHERE AND/OR, WHERE LIKE
	Try GROUP BY, ORDER BY, HAVING clauses
	
Display order no., order date, Customer name, product name, qty, price, amount
optional:
	for customers from Berlin.
	
DDL: CREATE, DROP, TRUNCATE.
DML: SELECT, INSERT, UPDATE, DELETE.
DQL: SELECT
DCL: Data Control Lanaguage
	GRANT
	REVOKE
	(usually used by Database Administrators)
	
	GRANT syntax:
	GRANT <privilege_to_be_granted> ON <object_name>
	TO <username>
	
	Example:
	USE MyProjectDB;
	GRANT INSERT ON Employees TO ajaysingala
	GRANT INSERT, SELECT ON Employees TO ajaysingala
	
	REVOKE syntax:
	REVOKE <privilege_to_be_revoked> ON <object_name>
	FROM <username>
	REVOKE INSERT  ON Employees FROM ajaysingala

TCL: Transaction Control Language.
Transaction Management.
COMMIT
ROLLBACK

Syntax:
SQL Server:
BEGIN TRANSACTION
	UPDATE
	
	UPDATE
	
	IF @HASERROR <> 0 THEN
		ROLLBACK
	ELSE
		COMMIT
END

MySQL:
START TRANSACTION;

UPDATE ....
INSERT
DELETE

COMMIT;

ROLLBACK;

STORED PROCEDURES

BEGIN
	DECLARE 'fail' bool DEFAULT 0;
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET 'fail' = 1;
	START TRANSACTION
	Insert
	update
	delete
	
	IF 'fail' = 1 THEN
		ROLLBACK;
	ELSE
		COMMIT;
	END IF;
END

Where you perform multiple operations as part of a single txn.
eCommerce:
I place an order for 10 boxes of blue White Board Marker.
Currently the stock of Blue White Board Marker is 100 boxes.
Records created / updated:
	1. An Orders record.
	2. An OrderDetails record.
	3. Stock of Blue White Board Markers is updated (reduced by 10 boxes) (Products table)
	

VIEWS:
Like tables, but not physical tables.

SELECT o.OrderId, o.OrderDate, o.CustomerId, c.CustomerName, c.ContactName, od.ProductId, p.ProductName, od.Quantity, p.Price, p.CategoryId, ct.CategoryName, p.SupplierId, s.SupplierName
FROM Orders o
INNER JOIN Customers c ON c.CustomerId = o.CustomerId
INNER JOIN OrderDetails od ON o.OrderId = od.OrderId
INNER JOIN Products p ON p.ProductId = od.ProductId
INNER JOIN Categories ct ON ct.CategoryId = p.CategoryId
INNER JOIN Suppliers s ON s.SupplierId = p.SupplierId


CREATE VIEW OrderInfoView
AS
	SELECT o.OrderId, o.OrderDate, o.CustomerId, c.CustomerName, c.ContactName, od.ProductId, p.ProductName, od.Quantity, p.Price,
		p.CategoryId, ct.CategoryName, p.SupplierId, s.SupplierName
	FROM Orders o
		INNER JOIN Customers c ON c.CustomerId = o.CustomerId
		INNER JOIN OrderDetails od ON o.OrderId = od.OrderId
		INNER JOIN Products p ON p.ProductId = od.ProductId
		INNER JOIN Categories ct ON ct.CategoryId = p.CategoryId
		INNER JOIN Suppliers s ON s.SupplierId = p.SupplierId

SELECT * FROM OrderInfoView

JOINS:
-INNER JOIN
-LEFT OUTER JOIN
-RIGHT OUTER JOIN
-FULL OUTER JOIN
-SELF JOIN

INNER JOIN
Returns records that have matching values in both tables.

SELECT p.ProductId, p.ProductName, p.CategoryId, c.CategoryName
FROM Products p
INNER JOIN Catrgories c ON c.CategoryId = p.CategoryId

LEFT OUTER JOIN or LEFT JOIN:
Returns all records from the left table, and matching records from the right table.

SELECT p.ProductId, p.ProductName, p.CategoryId, c.CategoryId, c.CategoryName
FROM Categories c 
LEFT OUTER JOIN products p ON c.CategoryId = p.CategoryId


RIGHT OUTER JOIN a.k.a. RIGHT JOIN:
Returns all records from the gright table, and matching records from the left table.

SELECT p.ProductId, p.ProductName, p.CategoryId, c.CategoryId, c.CategoryName
FROM Products p
RIGHT OUTER JOIN Categories c ON c.CategoryId = p.CategoryId

FULL (OUTER) JOIN:
Returns all records when there is a match in either the left or the right table.

SELECT p.ProductId, p.ProductName, p.CategoryId, c.CategoryId, c.CategoryName
FROM Products p
FULL OUTER JOIN Categories c ON c.CategoryId = p.CategoryId

SELECT DISTINCT

Indexing:
By Default, when you create a PK on a table, it will also create an INDEX for that table on the PK column.

SELECT * FROM Products
WHERE ProductId = 101

Pages

SELECT * FROM Customers
WHERE City = 'Berlin'

SELECT * FROM Customers
WHERE City = 'London'

Syntax:
CREATE INDEX <index_name)
ON <table_name> (col1)

CREATE INDEX <index_name>
ON <table_name> (col1, col2,...coln)

Example:
CREATE INDEX idxCustomersCity
ON Customers (City)

CREATE INDEX idxCustomersCityCountry
ON Customers (City, Country)

SELECT * FROM Customers
WHERE City = 'London'
AND Country = 'Germany'

The more indexes have on a table, it will impact the performance of INSERT (UPDATE & DELETE) Queries on that table.

In your DB Design and Application development, NEVER EVER EVER delete (rows) physically.
No DELETE anywhere!!!!
DELETE FROM Orders
WHERE ;

For auditing purposes!!!
INACTIVE!!!


ARCHIVE

SET Operators:
-UNION
-INTERSECT
-EXCEPT

UNION:
Used to combine result sets from two or more tables using a SELECT statement.
So how is it different from using a JOIN?
Produces a result set that is a "UNION" of both SELECT statements.

Syntax:
SELECT col1, col2,...coln
FROM table1
UNION
SELECT col1, col2,...coln
FROM table2

Rules:
1. Every SELECT statement that is part of the UNION must have the same number of columns.
This is wrong:
SELECT Id, Firstname
FROM Customers
UNION
SELECT Id, City, Country
FROM Suppliers

2. The columns must also have similar data types.

This is wrong:
SELECT Id, Firstname, Lastname
FROM Customers
UNION
SELECT OrderId, OrderDate, CustomerId
FROM Orders

3. The order of the columns in both SELECT statements should be same.
This is wrong:
SELECT Id, Firstname, Lastname
FROM Customers
UNION
SELECT EmployeeFirstName, EmployeeId, EmployeeLastname
FROM Employees

UNION operator will show only unique values.

UNION ALL operator:
To sell duplicate values as well, use UNION ALL.

You can use WHERE and ORDR BY with UNION and UNION ALL.

INTERSECT operator:
Used to combine two or more SELET statements, and the result set will be an intersection of the data, meaning it will only return rows that are common to both the SELECT statements.


EXCEPT operator:
Returns those rows that are result of the first SELECT and not returned by the second SELECT.


Normalization:
Process of organizing data in a sensible and logical manner.
Keeping mind performance, storage and usability.
It is done to reduce redundancy of data in the DB.
It helps improving the data integrity of the DB.

If you do not normalize properly, there can be 3 anomalies:
1) Insertion Anomaly: It occurs when we cannot insert data into a table without the presence of another attribute.
2) Update anomaly: It is data inconsistency that results from data redundancy.
3) Deletion anomaly: It occurs when certain attributes are lost because of deletion of other attributes.

1st Normal Form (1NF):
Here, we tackle the problem of atomicity. Meaning, individual columns in the table should not have multiple values.
If any column in the table contains composite values (mulit-valued attribute), it violates the 1NF.

2nd Normal Form (2NF):
1. Table must already be in 1NF.
2. There should be no partial dependency.
All atrributes (columns) in the table must depend on the Primary Key.

3rd Normal Form (3NF):
1. Table must already be in 2NF.
2. Non-primary key columns should not depend on other non-primary key columns.
3. Remove data that does not depend on the table's PK.
4. There is no Transitive functional dependency.

A Transitive functional dependency is when non-key column might cause any of the other non-key columns to change.

ACID (guiding principles that ensure database transactions are processed reliably):
-Atomicity
-Consistency
-Isolation
-Durability

Atomicity:
Commits finish entire an operation (txn) successfully Or if it fails, everything is rolled back.
Either everything succeeds or everything fails.
An atomic transaction ensure that any commit finishes the entire operation successfully. Or in case of a failure (exception, error), the DB is rolled back to it's previous state before the transaction started.

Consistency:
Any change done should maintain the data integrity.
This is in in a way achieved via Atomicity.
Any changes or transactions must not violate the integrity of the data.

Isolation:
Any read/write will not be impacted by any other read/write.
Separation of transactions.

Durability:
As long as a transaction is commited, the data is survive permanently.
Durability ensures that there data integrity.
It also ensures any changes made to the database and successfully committed, will survive permanently.


